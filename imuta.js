// Generated by CoffeeScript 1.9.3
(function() {
  var Imuta;

  Imuta = {
    clone: function(some) {
      switch (Object.prototype.toString.call(some)) {
        case "[object Undefined]":
          return void 0;
        case "[object Boolean]":
          return some;
        case "[object Number]":
          return some;
        case "[object String]":
          return some;
        case "[object Function]":
          return some.bind({});
        case "[object Null]":
          return null;
        case "[object Array]":
          return some.map(function(el) {
            return Imuta.clone(el);
          });
        case "[object Object]":
          return Object.keys(some).reduce((function(acc, k) {
            acc[Imuta.clone(k)] = Imuta.clone(some[k]);
            return acc;
          }), {});
      }
    },
    equal: function(a, b) {
      var i, keys_a, keys_b, len_a, len_b, ref, results, type_a, type_b;
      ref = [Object.prototype.toString.call(a), Object.prototype.toString.call(b)], type_a = ref[0], type_b = ref[1];
      if (type_a === type_b) {
        switch (type_a) {
          case "[object Undefined]":
            return a === b;
          case "[object Boolean]":
            return a === b;
          case "[object Number]":
            return a === b;
          case "[object String]":
            return a === b;
          case "[object Function]":
            return a.toString() === b.toString();
          case "[object Null]":
            return a === b;
          case "[object Array]":
            len_a = a.length;
            len_b = b.length;
            if (len_a === len_b) {
              return (function() {
                results = [];
                for (var i = 0; 0 <= len_a ? i <= len_a : i >= len_a; 0 <= len_a ? i++ : i--){ results.push(i); }
                return results;
              }).apply(this).every(function(n) {
                return Imuta.equal(a[n], b[n]);
              });
            } else {
              return false;
            }
            break;
          case "[object Object]":
            keys_a = Object.keys(a).sort();
            keys_b = Object.keys(b).sort();
            if (Imuta.equal(keys_a, keys_b)) {
              return keys_a.every(function(k) {
                return Imuta.equal(a[k], b[k]);
              });
            } else {
              return false;
            }
        }
      } else {
        return false;
      }
    }
  };

  module.exports = Imuta;

}).call(this);
